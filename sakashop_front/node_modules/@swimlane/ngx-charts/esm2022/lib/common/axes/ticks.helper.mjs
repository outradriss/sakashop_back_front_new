export function reduceTicks(ticks, maxTicks) {
    if (ticks.length > maxTicks) {
        const reduced = [];
        const modulus = Math.floor(ticks.length / maxTicks);
        for (let i = 0; i < ticks.length; i++) {
            if (i % modulus === 0) {
                reduced.push(ticks[i]);
            }
        }
        ticks = reduced;
    }
    return ticks;
}
export function getTickLines(label, maxLength, maxLines) {
    const labelString = (label || '').toString();
    let totalLines = [];
    if (/\s/.test(labelString)) {
        totalLines = labelString.split(/\s+/).reduce((lines, line) => {
            const last = (lines.pop() || '') + ' ';
            return last.length + line.length > maxLength ? [...lines, last.trim(), line.trim()] : [...lines, last + line];
        }, []);
    }
    else {
        let startIndex = 0;
        while (startIndex < labelString.length) {
            totalLines.push(labelString.substring(startIndex, startIndex + maxLength));
            startIndex += maxLength;
        }
    }
    if (totalLines.length > maxLines) {
        totalLines = totalLines.splice(0, maxLines);
        totalLines[totalLines.length - 1] += '...';
    }
    return totalLines;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGlja3MuaGVscGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvc3dpbWxhbmUvbmd4LWNoYXJ0cy9zcmMvbGliL2NvbW1vbi9heGVzL3RpY2tzLmhlbHBlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxNQUFNLFVBQVUsV0FBVyxDQUFDLEtBQVksRUFBRSxRQUFnQjtJQUN4RCxJQUFJLEtBQUssQ0FBQyxNQUFNLEdBQUcsUUFBUSxFQUFFLENBQUM7UUFDNUIsTUFBTSxPQUFPLEdBQUcsRUFBRSxDQUFDO1FBQ25CLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLE1BQU0sR0FBRyxRQUFRLENBQUMsQ0FBQztRQUNwRCxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsS0FBSyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDO1lBQ3RDLElBQUksQ0FBQyxHQUFHLE9BQU8sS0FBSyxDQUFDLEVBQUUsQ0FBQztnQkFDdEIsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUN6QixDQUFDO1FBQ0gsQ0FBQztRQUNELEtBQUssR0FBRyxPQUFPLENBQUM7SUFDbEIsQ0FBQztJQUVELE9BQU8sS0FBSyxDQUFDO0FBQ2YsQ0FBQztBQUVELE1BQU0sVUFBVSxZQUFZLENBQUMsS0FBYSxFQUFFLFNBQWlCLEVBQUUsUUFBZ0I7SUFDN0UsTUFBTSxXQUFXLEdBQUcsQ0FBQyxLQUFLLElBQUksRUFBRSxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDN0MsSUFBSSxVQUFVLEdBQUcsRUFBRSxDQUFDO0lBRXBCLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsRUFBRSxDQUFDO1FBQzNCLFVBQVUsR0FBRyxXQUFXLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEtBQWUsRUFBRSxJQUFZLEVBQUUsRUFBRTtZQUM3RSxNQUFNLElBQUksR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLEVBQUUsSUFBSSxFQUFFLENBQUMsR0FBRyxHQUFHLENBQUM7WUFDdkMsT0FBTyxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLEdBQUcsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxFQUFFLElBQUksQ0FBQyxJQUFJLEVBQUUsRUFBRSxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssRUFBRSxJQUFJLEdBQUcsSUFBSSxDQUFDLENBQUM7UUFDaEgsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQ1QsQ0FBQztTQUFNLENBQUM7UUFDTixJQUFJLFVBQVUsR0FBRyxDQUFDLENBQUM7UUFDbkIsT0FBTyxVQUFVLEdBQUcsV0FBVyxDQUFDLE1BQU0sRUFBRSxDQUFDO1lBQ3ZDLFVBQVUsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLFNBQVMsQ0FBQyxVQUFVLEVBQUUsVUFBVSxHQUFHLFNBQVMsQ0FBQyxDQUFDLENBQUM7WUFDM0UsVUFBVSxJQUFJLFNBQVMsQ0FBQztRQUMxQixDQUFDO0lBQ0gsQ0FBQztJQUVELElBQUksVUFBVSxDQUFDLE1BQU0sR0FBRyxRQUFRLEVBQUUsQ0FBQztRQUNqQyxVQUFVLEdBQUcsVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsUUFBUSxDQUFDLENBQUM7UUFDNUMsVUFBVSxDQUFDLFVBQVUsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLElBQUksS0FBSyxDQUFDO0lBQzdDLENBQUM7SUFFRCxPQUFPLFVBQVUsQ0FBQztBQUNwQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGZ1bmN0aW9uIHJlZHVjZVRpY2tzKHRpY2tzOiBhbnlbXSwgbWF4VGlja3M6IG51bWJlcik6IGFueVtdIHtcbiAgaWYgKHRpY2tzLmxlbmd0aCA+IG1heFRpY2tzKSB7XG4gICAgY29uc3QgcmVkdWNlZCA9IFtdO1xuICAgIGNvbnN0IG1vZHVsdXMgPSBNYXRoLmZsb29yKHRpY2tzLmxlbmd0aCAvIG1heFRpY2tzKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRpY2tzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAoaSAlIG1vZHVsdXMgPT09IDApIHtcbiAgICAgICAgcmVkdWNlZC5wdXNoKHRpY2tzW2ldKTtcbiAgICAgIH1cbiAgICB9XG4gICAgdGlja3MgPSByZWR1Y2VkO1xuICB9XG5cbiAgcmV0dXJuIHRpY2tzO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0VGlja0xpbmVzKGxhYmVsOiBzdHJpbmcsIG1heExlbmd0aDogbnVtYmVyLCBtYXhMaW5lczogbnVtYmVyKTogc3RyaW5nW10ge1xuICBjb25zdCBsYWJlbFN0cmluZyA9IChsYWJlbCB8fCAnJykudG9TdHJpbmcoKTtcbiAgbGV0IHRvdGFsTGluZXMgPSBbXTtcblxuICBpZiAoL1xccy8udGVzdChsYWJlbFN0cmluZykpIHtcbiAgICB0b3RhbExpbmVzID0gbGFiZWxTdHJpbmcuc3BsaXQoL1xccysvKS5yZWR1Y2UoKGxpbmVzOiBzdHJpbmdbXSwgbGluZTogc3RyaW5nKSA9PiB7XG4gICAgICBjb25zdCBsYXN0ID0gKGxpbmVzLnBvcCgpIHx8ICcnKSArICcgJztcbiAgICAgIHJldHVybiBsYXN0Lmxlbmd0aCArIGxpbmUubGVuZ3RoID4gbWF4TGVuZ3RoID8gWy4uLmxpbmVzLCBsYXN0LnRyaW0oKSwgbGluZS50cmltKCldIDogWy4uLmxpbmVzLCBsYXN0ICsgbGluZV07XG4gICAgfSwgW10pO1xuICB9IGVsc2Uge1xuICAgIGxldCBzdGFydEluZGV4ID0gMDtcbiAgICB3aGlsZSAoc3RhcnRJbmRleCA8IGxhYmVsU3RyaW5nLmxlbmd0aCkge1xuICAgICAgdG90YWxMaW5lcy5wdXNoKGxhYmVsU3RyaW5nLnN1YnN0cmluZyhzdGFydEluZGV4LCBzdGFydEluZGV4ICsgbWF4TGVuZ3RoKSk7XG4gICAgICBzdGFydEluZGV4ICs9IG1heExlbmd0aDtcbiAgICB9XG4gIH1cblxuICBpZiAodG90YWxMaW5lcy5sZW5ndGggPiBtYXhMaW5lcykge1xuICAgIHRvdGFsTGluZXMgPSB0b3RhbExpbmVzLnNwbGljZSgwLCBtYXhMaW5lcyk7XG4gICAgdG90YWxMaW5lc1t0b3RhbExpbmVzLmxlbmd0aCAtIDFdICs9ICcuLi4nO1xuICB9XG5cbiAgcmV0dXJuIHRvdGFsTGluZXM7XG59XG4iXX0=